%token_destructor { free($$); }
%extra_argument { TOMLParserState *state }

%include {
#include <assert.h>
#include <stdlib.h>
#include "toml-parser.h"

typedef struct table_id_node {
  char *name;
  struct table_id_node *first;
  struct table_id_node *next;
} table_id_node;

char * newstr( TOMLToken *token ) {
  int size = token->end - token->start;
  char *buffer = malloc( size + 1 );
  strncpy( buffer, token->start, size );
  buffer[ size ] = 0;
  return buffer;
}
}

%name TOMLParser

file ::= line EOF .
line ::= line_and_comment .
line ::= line line_and_comment .
line_and_comment ::= line_content .
line_and_comment ::= COMMENT .
line_content ::= table_header .
line_content ::= entry .

table_header ::= LEFT_SQUARE table_header_2 RIGHT_SQUARE .

table_header_2 ::= LEFT_SQUARE table_id(TABLE_ID) RIGHT_SQUARE . {
  table_id_node *first = TABLE_ID->first;
  table_id_node *node = first;
  table_id_node *next = node->next;
  TOMLTable *table = state->rootTable;

  for ( ; node; node = next ) {
    if ( !TOMLTable_getKey( table, node->name ) ) {
      TOMLRef nextValue;
      if ( node->next ) {
        nextValue = TOML_aTable( NULL, NULL );
      } else {
        nextValue = TOML_anArray( TOML_TABLE, NULL );
      }
      TOMLTable_setKey( table, node->name, nextValue );
    }
    table = TOMLTable_getKey( table, node->name );
    next = node->next;
    free( node->name );
    free( node );
  }

  TOMLArray *array = (TOMLArray *) table;
  table = TOML_aTable( NULL, NULL );
  TOMLArray_append( array, table );

  state->currentTable = table;
}
table_header_2 ::= table_id(TABLE_ID) . {
  table_id_node *first = TABLE_ID->first;
  table_id_node *node = first;
  table_id_node *next = node->next;
  TOMLTable *table = state->rootTable;

  for ( ; node; node = next ) {
    if ( !TOMLTable_getKey( table, node->name ) ) {
      TOMLTable_setKey( table, node->name, TOML_aTable( NULL, NULL ) );
    }
    table = TOMLTable_getKey( table, node->name );
    next = node->next;
    free( node->name );
    free( node );
  }

  state->currentTable = table;
}

%type table_id { table_id_node * }
table_id(TABLE_ID) ::= table_id(LAST_ID) ID_DOT ID(ID) . {
  table_id_node *node = malloc( sizeof(table_id_node) );
  node->name = newstr( ID );
  node->first = LAST_ID->first;
  node->next = NULL;
  LAST_ID->next = node;
  TABLE_ID = node;
}
table_id(TABLE_ID) ::= ID(ID) . {
  table_id_node *node = malloc( sizeof(table_id_node) );
  node->name = newstr( ID );
  node->first = node;
  node->next = NULL;
  TABLE_ID = node;
}

entry ::= ID(ID) EQ value(VALUE) . {
  char *tmp = newstr( ID );
  if ( tmp != NULL || VALUE != NULL ) {
    TOMLTable_setKey( state->currentTable, tmp, VALUE );
  }
  free( tmp );
}

value(VALUE) ::= array(ARRAY) . { VALUE = ARRAY; }
value(VALUE) ::= string(STRING) . { VALUE = STRING; }
value(VALUE) ::= number(NUMBER) . { VALUE = NUMBER; }

array(ARY) ::= LEFT_SQUARE members(OLD_ARY) RIGHT_SQUARE . {
  ARY = OLD_ARY;
}
members(ARY) ::= array_members(OLD_ARY) . { ARY = OLD_ARY; }
members(ARY) ::= string_members(OLD_ARY) . { ARY = OLD_ARY; }
members(ARY) ::= number_members(OLD_ARY) . { ARY = OLD_ARY; }
members(ARY) ::= . { ARY = TOML_anArray( TOML_NOTYPE, NULL ); }

array_members(NEW_ARY) ::= array_members(OLD_ARY) comma array(ARRAY) . {
  NEW_ARY = OLD_ARY;
  TOMLArray_append( NEW_ARY, ARRAY );
}
array_members(NEW_ARY) ::= array_members(OLD_ARY) comma . {
  NEW_ARY = OLD_ARY;
}
array_members(ARRAY_ARRAY) ::= array(ARRAY) . {
  ARRAY_ARRAY = TOML_anArray( TOML_ARRAY, ARRAY, NULL );
}

string_members(NEW_ARY) ::= string_members(OLD_ARY) comma string(STRING) . {
  NEW_ARY = OLD_ARY;
  TOMLArray_append( NEW_ARY, STRING );
}
string_members(NEW_ARY) ::= string_members(OLD_ARY) comma . {
  NEW_ARY = OLD_ARY;
}
string_members(STRING_ARY) ::= string(STRING) . {
  STRING_ARY = TOML_anArray( TOML_STRING, STRING, NULL );
}

number_members(NEW_ARY) ::= number_members(OLD_ARY) comma number(NUMBER) . {
  NEW_ARY = OLD_ARY;
  TOMLArray_append( NEW_ARY, NUMBER );
}
number_members(NEW_ARY) ::= number_members(OLD_ARY) comma . {
  NEW_ARY = OLD_ARY;
}
number_members(NUMBER_ARY) ::= number(NUMBER) . {
  NUMBER_ARY = TOML_anArray( TOML_NUMBER, NUMBER, NULL );
}

comma ::= COMMA .

string(STR) ::= STRING(STR_TOKEN) . {
  TOMLToken *token = STR_TOKEN;
  STR = TOML_aStringN( token->start + 1, token->end - token->start - 2 );
}

number(NUMBER) ::= NUMBER(NUMBER_TOKEN) . {
  TOMLToken *token = NUMBER_TOKEN;
  char *tmp = newstr( token );

  if ( strchr( token->start, '.' ) != NULL ) {
    NUMBER = TOML_aDouble( atof( tmp ) );
  } else {
    NUMBER = TOML_anInt( atoi( tmp ) );
  }

  free( tmp );
}
